@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam legendBackgroundColor white
skinparam legendFontSize 50
skinparam noteFontSize 30
skinparam noteBorderColor black
skinparam linetype polyline
'skinparam linetype ortho
skinparam class {
    BackgroundColor white
    ArrowColor black
    BorderColor black
}
left to right direction

legend left
 <back:lightpink>   </back> MVC
 <back:lightblue>   </back> Singleton
 <back:wheat>   </back> Observer
endlegend

note as N1 #lightpink
    MVC
    Model:

    UserDatabase
    UserDao
    User
    NotifSettingDatabase
    NotifSettingDao
    NotifSetting
    MedicationRepository
    MedicationDatabase
    MedicationDao
    Medication
    MedActivityRepository
    MedActivityDatabase
    MedActivityDao
    MedActivity
    CreateMedicationViewModel
    MedicationsListViewModel
    MedActivitiesListViewModel
endnote

note as N2 #lightpink
    MVC
    View: xml files
endnote

note as N3 #lightpink
    MVC
    Controller:

    Frag_Home
    Frag_Add
    Frag_Selfreport
    Frag_Notification
    Medicine_List
    Dose_Page
    Popup_Window
    New_User_Profile
endnote

note as N4 #lightblue
    Singleton

    UserDatabase
    NotifSettingDatabase
    MedicationDatabase
    MedActivityDatabase
endnote

note as N5 #wheat
    Observer

    MainActivity
    Second_page_get_personaldata
    Nav_page
    Frag_Home
    Frag_Add
    Frag_Selfreport
    Frag_Notification
    Setting_Page
    Edit_Medication
    Medicine_List
    Dose_Page
    Popup_Window
    New_User_Profile
    RingActivity
endnote

package data #lightpink {
    UserDatabase "1 " *-- "1 " UserDao : composition
    UserDao "1 " o-- "0..1 " User : aggregation

    NotifSettingDatabase "1 " *-- "1 " NotifSettingDao : composition
    NotifSettingDao "1 " o-- "0..1 " NotifSetting : aggregation

    MedicationRepository "1 " o-- "1 " MedicationDatabase : aggregation
    MedicationDatabase "1 " *-- "1 " MedicationDao : composition
    MedicationDao "1 " o-- "0..* " Medication : aggregation

    MedActivityDatabase "1 " *-- "1 " Converters : composition
    MedActivityRepository "1 " o-- "1 " MedActivityDatabase : aggregation
    MedActivityDatabase "1 " *-- "1 " MedActivityDao : composition
    MedActivityDao "1 " o-- "0..* " MedActivity : aggregation
}

MainActivity .right.> Second_page_get_personaldata : intent
Second_page_get_personaldata .right.> Nav_page : intent

Nav_page "1 " *-- "0..1 " Frag_Home : composition
Nav_page "1 " *-- "0..1 " Frag_Add : composition
Nav_page "1 " *-- "0..1 " Frag_Selfreport : composition
Nav_page "1 " *-- "0..1 " Frag_Notification : composition

Nav_page ..> New_User_Profile : intent
Nav_page ..> Setting_Page : intent

Setting_Page ..> Popup_Window : intent
Setting_Page ..> Medicine_List : intent
Setting_Page ..> Dose_Page : intent

Frag_Home ..> Dose_Page : intent
Frag_Home ..> Edit_Medication : intent

Frag_Home "1 " o-- "1 " medicationslist.MedicationsListViewModel : aggregation
Frag_Home "1 " o-- "1 " medicationslist.MedicationRecyclerViewAdapter : aggregation
Medicine_List "1 " o-- "1 " medicationslist.MedicationsListViewModel : aggregation
Medicine_List "1 " o-- "1 " medicationslist.MedicationRecyclerViewAdapter : aggregation
Dose_Page "1 " o-- "1 " medicationslist.MedicationsListViewModel : aggregation
Dose_Page "1 " o-- "1 " medicationslist.MedActivitiesListViewModel : aggregation
Dose_Page "1 " o-- "1 " medicationslist.DoseRecyclerViewAdapter : aggregation
medicationslist.DoseViewHolder "1 " o-up- "1 " medicationslist.MedActivitiesListViewModel : aggregation

Frag_Add "1 " o-- "1 " createmedication.CreateMedicationViewModel : aggregation

Edit_Medication "1 " *-- "1 " Frag_Add : composition

Medication "0..* " o-up- "1 " AlarmManager : aggregation
AlarmManager ..> broadcastreceiver.AlarmBroadcastReceiver : intent
broadcastreceiver.AlarmBroadcastReceiver ..> service.AlarmService : intent
service.AlarmService ..> RingActivity : intent

Frag_Notification ..> service.RescheduleAlarmsService : intent
Frag_Notification ..> service.DescheduleAlarmsService : intent

service.AlarmService ..> application.App : dependency
service.RescheduleAlarmsService ..> application.App : dependency
service.DescheduleAlarmsService ..> application.App : dependency

medicationslist.MedicationRecyclerViewAdapter "1 " *-- "1 " medicationslist.MedicationViewHolder : composition
medicationslist.DoseRecyclerViewAdapter "1 " *-- "1 " medicationslist.DoseViewHolder : composition

Second_page_get_personaldata ..> UserDatabase : dependency
New_User_Profile ..> UserDatabase : dependency
Popup_Window ..> UserDatabase : dependency
createmedication.CreateMedicationViewModel ..> MedicationRepository : dependency
Frag_Notification ..> NotifSettingDatabase : dependency
medicationslist.MedicationsListViewModel ..> MedicationRepository : dependency
medicationslist.MedActivitiesListViewModel ..> MedActivityRepository : dependency

class MainActivity #wheat {
    # onCreate(Bundle) : void
    + launchActivity(View) : void
    - existingUserInfo() : boolean
    - initNotifSettings() : void
}

class Second_page_get_personaldata #wheat {
    - editTextFirstName : EditText
    - editTextLastName : EditText
    - editTextAge : EditText
    - mTextWatcher : TextWatcher

    # onCreate(Bundle) : void
    + launchActivists(View) : void
    + launchActivistswithnovalue(View) : void
    - checkFieldsForEmptyValues() : void
    - saveUser() : void
}

class Nav_page #wheat {
    - mOnNavigationItemSelectedListener : BottomNavigationView.OnNavigationItemSelectedListener

    # onCreate(Bundle) : void
    + onCreateOptionsMenu(Menu) : boolean
    + onOptionsItemSelected(MenuItem) : boolean
    # onActivityResult(int, int, Intent) : void
    + click_User_Profile(View) : void
}

class Frag_Home #wheat|lightpink {
    - medicationRecyclerViewAdapter : MedicationRecyclerViewAdapter
    - medicationsListViewModel : MedicationsListViewModel

    + Frag_Home()
    + onCreate(Bundle) : void
    + onCreateView(LayoutInflater, ViewGroup, Bundle) : View
    - getUserInfo(View) : void
}

class Frag_Add #wheat|lightpink {
    # name : EditText
    # description : EditText
    # quantity : EditText
    # shape_radioBtnGroup : RadioGroup
    # dose_1 : EditText
    # dose_2 : EditText
    # dose_3 : EditText
    # dose_4 : EditText
    # button_hide_med_info : Button
    # med_info_view : View
    # button_hide_schedule : Button
    # med_schedule_view : View
    # dropdown_freq : Spinner
    # specificDays_view_1 : View
    # specificDays_view_2 : View
    # checkBox_Mon : CheckBox
    # checkBox_Tue : CheckBox
    # checkBox_Wed : CheckBox
    # checkBox_Thu : CheckBox
    # checkBox_Fri : CheckBox
    # checkBox_Sat : CheckBox
    # checkBox_Sun : CheckBox
    # dropdown_timesPerDay : Spinner
    # text_time_dose_1 : TextView
    # time_dose_view_1 : View
    # timePicker_1 : TimePicker
    # text_time_dose_2 : TextView
    # time_dose_view_2 : View
    # timePicker_2 : TimePicker
    # text_time_dose_3 : TextView
    # time_dose_view_3 : View
    # timePicker_3 : TimePicker
    # text_time_dose_4 : TextView
    # time_dose_view_4 : View
    # timePicker_4 : TimePicker
    # button_save : Button
    - createMedicationViewModel : CreateMedicationViewModel
    - notifSettingDao : NotifSettingDao

    + Frag_Add()
    + onCreate(Bundle) : void
    + onCreateView(LayoutInflater, ViewGroup, Bundle) : View
    - buttonHideView(Button, View) : void
    - generateTimeAndDose(TextView, View, TimePicker, int, int) : void
    - setMandatoryTextListener() : void
    - decideSaveButtonStatus() : void
    - populateExistingInfo() : void
    - scheduleMedication() : void
    - updateMedication() : void
}

class Frag_Selfreport #wheat|lightpink {
    + Frag_Selfreport()
    + onCreateView(LayoutInflater, ViewGroup, Bundle) : View
}

class Frag_Notification #wheat|lightpink {
    - switch_noti : Switch
    - layout_noti : View
    - dropdown_noti_type : Spinner
    - dropdown_noti_remind : Spinner
    - edit_noti_msg : EditText
    - switch_renew_pre : Switch
    - layout_renew_pre : View
    - dropdown_renew_time : Spinner
    - edit_noti__renew_msg : EditText
    - notifSettingDao : NotifSettingDao
    - notifSetting : NotifSetting
    - notif_switchListener : CompoundButton.OnCheckedChangeListener
    - refill_switchListener : CompoundButton.OnCheckedChangeListener
    - dropdownListener : AdapterView.OnItemSelectedListener
    - textWatcher : TextWatcher

    + Frag_Notification()
    + onCreate(Bundle) : void
    + onCreateView(LayoutInflater, ViewGroup, Bundle) : View
    - startDescheduleAlarmsService(Context) : void
    - startRescheduleAlarmsService(Context) : void
    - setNotifSettings() : void
    - saveNotifSetting() : void
}

class New_User_Profile #wheat|lightpink {
    - userDao : UserDao
    - users : List<User>
    - editTextFirstName : EditText
    - editTextLastName : EditText
    - editTextAge  : EditText
    - mTextWatcher : TextWatcher

    # onCreate(Bundle) : void
    - checkFieldsForEmptyValues() : void
    - setUserProperties() : void
    - saveUser() : void
}

class Setting_Page #wheat {
    - image : int[]
    - headline : String[]
    - bottomline : String[]

    # onCreate(Bundle) : void
    + CheckboxClickCheck(View) : void
    + click_name_tag(View) : void
    + avatar_click(View) : void
    + onActivityResult(int, int, Intent) : void
    - setUserProperties() : void
}

class Popup_Window #wheat|lightpink {
    - userDao : UserDao
    - users : List<User>

    # onCreate(Bundle) : void
    + avatar_change(View view) : void
    + avatar_change1(View view) : void
}

class Medicine_List #wheat|lightpink {
    # onCreate(Bundle) : void
}

class Dose_Page #wheat|lightpink {
    # onCreate(Bundle) : void
}

class Edit_Medication #wheat {
    # onCreate(Bundle) : void
}

class RingActivity #wheat {
    # dismiss : Button
    # snooze : Button
    # clock : ImageView
    # message : TextView

    # onCreate(Bundle) : void
    - animateClock() : void
}

'application
class application.App {
    + CHANNEL_ID : String

    + onCreate() : void
    - createNotificationChannel() : void
}

'broadcastreceiver
class broadcastreceiver.AlarmBroadcastReceiver {
    {static} + MED_ID : String
    {static} + MONDAY : String
    {static} + TUESDAY : String
    {static} + WEDNESDAY : String
    {static} + THURSDAY : String
    {static} + FRIDAY : String
    {static} + SATURDAY : String
    {static} + SUNDAY : String
    {static} + RECURRING : String
    {static} + TITLE : String
    {static} + MED_NAME : String
    {static} + MED_DOSE : String
    {static} + HOUR : String
    {static} + MINUTE : String

    + onReceive(Context, Intent) : void
    - alarmIsToday(Intent) : boolean
    - startAlarmService(Context, Intent) : void
    - startRescheduleAlarmsService(Context) : void
}

'createmedication
class createmedication.CreateMedicationViewModel #lightpink {
    - medicationRepository : MedicationRepository
    - medActivityRepository : MedActivityRepository

    + CreateMedicationViewModel(Application)
    + insert(Medication) : void
    + update(Medication) : void
    + insert(MedActivity) : void
    + insertAll(List<MedActivity>) : void
    + update(MedActivity) : void
}

'data
abstract class UserDatabase #lightblue {
    {static} - INSTANCE : UserDatabase

    {abstract} + UserDao()
    {static} + getDatabase(Context) : UserDatabase
}

interface UserDao << interface >> {
    + insert(User) : void
    + deleteAll() : void
    + getUser() : List<User>
    + update(User) : void
}

class User {
    - userId : int
    - firstName : String
    - lastName : String
    - age : int
    - avatar : String
    - gender : int
    - created : long

    + User(int, String, String, int, int, long)
    + getUserId() : int
    + setUserId(int) : void
    + getFirstName() : String
    + getLastName() : String
    + getAge() : int
    + getAvatar() : String
    + setAvatar() : void
    + getGender() : int
    + isMale() : boolean
    + isFemale() : boolean
    + isOthers() : boolean
    + getCreated() : long
    + setCreated(long) : void
}

abstract class NotifSettingDatabase #lightblue {
    {static} - INSTANCE : NotifSettingDatabase

    {abstract} + NotifSettingDao()
    {static} + getDatabase(Context) : NotifSettingDatabase
}

interface NotifSettingDao << interface >> {
    + insert(NotifSetting) : void
    + deleteAll() : void
    + getNotifSettings() : List<NotifSetting>
    + update(NotifSetting) : void
}

class NotifSetting {
    - notifSettingId : int
    - enableNotif : boolean
    - notifTypeId : int
    - remindInMinutesId : int
    - notifMessage : String
    - enableRefillNotif : boolean
    - daysBeforeRefillId : int
    - refillNotifMessage : String
    - notifSoundId : int
    - snoozeMinutes : int
    - snoozeTimes : int[]

    + NotifSetting()
    + getNotifSettingId() : int
    + setNotifSettingId(int) : void
    + isEnableNotif() : boolean
    + setEnableNotif(boolean) : void
    + getNotifTypeId() : int
    + setNotifTypeId(int) : void
    + getRemindInMinutesId() : int
    + setRemindInMinutesId(int) : void
    + getNotifMessage() : String
    + setNotifMessage(String) : void
    + isEnableRefillNotif() : boolean
    + setEnableRefillNotif(boolean) : void
    + getDaysBeforeRefillId() : int
    + setDaysBeforeRefillId(int) : void
    + getRefillNotifMessage() : String
    + setRefillNotifMessage(String) : void
    + getNotifSoundId() : int
    + setNotifSoundId(int) : void
    + getSnoozeMinutes() : int
    + setSnoozeMinutes(int) : void
}

class MedicationRepository {
    - medicationDao : MedicationDao
    - medicationsLiveData : LiveData<List<Medication>>

    + MedicationRepository(Application)
    + insert(Medication) : void
    + update(Medication) : void
    + getMedicationsLiveData() : LiveData<List<Medication>>
    + loadSingle(int) : Medication
    + deleteById(int) : void
}

abstract class MedicationDatabase #lightblue {
    {static} - INSTANCE : MedicationDatabase
    {static} - NUMBER_OF_THREADS : int
    {static} + databaseWriteExecutor : ExecutorService

    {abstract} + medicationDao()
    {static} + getDatabase(Context) : MedicationDatabase
}

interface MedicationDao << interface >> {
    insert(Medication) : void
    deleteAll() : void
    getMedications() : LiveData<List<Medication>>
    loadSingle(int) : Medication
    deleteById(long) : void
    update(Medication) : void
}

class Medication {
    - medId : int
    - name : String
    - description : String
    - quantity : int
    - shape_id : int
    - monday : boolean
    - tuesday : boolean
    - wednesday : boolean
    - thursday : boolean
    - friday : boolean
    - saturday : boolean
    - sunday : boolean
    - times : int
    - hour_1 : int
    - minute_1 : int
    - dose_1 : int
    - hour_2 : int
    - minute_2 : int
    - dose_2 : int
    - hour_3 : int
    - minute_3 : int
    - dose_3 : int
    - hour_4 : int
    - minute_4 : int
    - dose_4 : int
    - created : long
    
    + Medication(int, String, String, int, int, long, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int, int, int, int, int, int, int, int, int, int, int, int)
    + Medication(int, String, String, int, int, long, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int, int)
    + getQuantity() : int
    + getShape_id() : int
    + getTimes() : int
    + getHour_1() : int
    + getMinute_1() : int
    + getDose_1() : int
    + getHour_2() : int
    + getMinute_2() : int
    + getDose_2() : int
    + getHour_3() : int
    + getMinute_3() : int
    + getDose_3() : int
    + getHour_4() : int
    + getMinute_4() : int
    + getDose_4() : int
    + getMedId() : int
    + setMedId(int) : void
    + isMonday() : boolean
    + isTuesday() : boolean
    + isWednesday() : boolean
    + isThursday() : boolean
    + isFriday() : boolean
    + isSaturday() : boolean
    + isSunday() : boolean
    + getName() : String
    + getDescription() : String
    + getCreated() : long
    + setCreated(long) : void
    + schedule(Context) : void
    + deschedule(Context) : void
}

class Converters {
    {static} + fromTimestamp(Long) : Date
    {static} + dateToTimestamp(Date) : Long
}

class MedActivityRepository {
    - medActivityDao : MedActivityDao
    - medActivitiesLiveData : LiveData<List<MedActivity>>

    + MedActivityRepository(Application)
    + insert(MedActivity) : void
    + insertAll(List<MedActivity>) : void
    + update(MedActivity) : void
    + getMedActivitiesLiveData() : LiveData<List<MedActivity>>
    + loadSingle(int) : MedActivity
    + loadByMedDate(int, Date) : MedActivity
}

abstract class MedActivityDatabase #lightblue {
    {static} - INSTANCE : MedActivityDatabase
    {static} - NUMBER_OF_THREADS : int
    {static} + databaseWriteExecutor : ExecutorService

    {abstract} + medActivityDao() : MedActivityDao
    {static} + getDatabase(Context) : MedActivityDatabase
}

interface MedActivityDao << interface >> {
    insert(MedActivity) : void
    insertAll(List<MedActivity>) : void
    deleteAll() : void
    getMedications() : LiveData<List<MedActivity>>
    loadSingle(int) : MedActivity
    loadByMedDate(int, Date) : MedActivity
    update(MedActivity) : void
}

class MedActivity {
    - medActivityId : int
    - medId : int
    - date : Date
    - firstMed : boolean
    - secondMed : boolean
    - thirdMed : boolean
    - fourthMed : boolean
    
    + MedActivity(int, Date)
    + getMedActivityId() : int
    + setMedActivityId(int) : void
    + getMedId() : int
    + setMedId(int) : void
    + getDate() : Date
    + setDate(Date) : void
    + isFirstMed() : boolean
    + isSecondMed() : boolean
    + isThirdMed() : boolean
    + isFourthMed() : boolean
    + getMedStatus(int) : boolean
    + setFirstMed(boolean) : void
    + setSecondMed(boolean) : void
    + setThirdMed(boolean) : void
    + setFourthMed(boolean) : void
    + setMedStatus(int, boolean) : void
}

'medicationslist
class medicationslist.MedicationsListViewModel #lightpink {
    - medicationRepository : MedicationRepository
    - medicationsLiveData : LiveData<List<Medication>>

    + MedicationsListViewModel(Application)
    + update(Medication) : void
    + getMedicationsLiveData() : LiveData<List<Medication>>
    + deleteById(int) : void
}

class medicationslist.MedicationViewHolder {
    - medName : TextView
    - medDays : TextView
    - medTimes : TextView

    + MedicationViewHolder(View)
    + bind(Medication) : void
}

class medicationslist.MedicationRecyclerViewAdapter {
    - medications : List<Medication>
    
    + MedicationRecyclerViewAdapter()
    + onCreateViewHolder(ViewGroup, int) : MedicationViewHolder
    + onBindViewHolder(MedicationViewHolder, int) : void
    + getItemCount() : int
    + setMedications(List<Medication>) : void
    + getMedByPos(int) : Medication
    + onViewRecycled(MedicationViewHolder) : void
}

class medicationslist.MedActivitiesListViewModel #lightpink {
    - medActivityRepository : MedActivityRepository
    - medActivitiesLiveData : LiveData<List<MedActivity>>

    + MedActivitiesListViewModel(Application)
    + update(MedActivity) : void
    + getMedActivitiesLiveData() : LiveData<List<MedActivity>>
}

class medicationslist.DoseViewHolder {
    - medTime : TextView
    - medName : TextView
    - medDose : TextView
    - checkBox : CheckBox
    - application : Application
    - year : int
    - month : int
    - day : int
    
    + DoseViewHolder(View, Application, int, int, int)
    + bind(Medication) : void
    + bind(Medication, MedActivity, int) : void
}

class medicationslist.DoseRecyclerViewAdapter {
    - doses : List<Medication>
    - medActivities : List<MedActivity>
    - application : Application
    - year : int
    - month : int
    - day : int
    
    + DoseRecyclerViewAdapter()
    + onCreateViewHolder(ViewGroup, int) : DoseViewHolder
    + onBindViewHolder(DoseViewHolder, int) : void
    + getItemCount() : int
    + setDate(int, int, int) : void
    + setDoses(List<Medication>) : void
    + setMedActivities(Application, List<MedActivity>) : void
}

'service
class service.AlarmService {
    - mediaPlayer : MediaPlayer
    - vibrator : Vibrator
    
    + onCreate() : void
    + onStartCommand(Intent, int, int) : int
    + onDestroy() : void
    + onBind(Intent) : IBinder
    {static} + isServiceRunningInForeground(Context, Class<?>) : boolean
}

class service.RescheduleAlarmsService {
    + onCreate() : void
    + onStartCommand(Intent, int, int) : int
    + onDestroy() : void
    + onBind(Intent) : IBinder
}

class service.DescheduleAlarmsService {
    + onCreate() : void
    + onStartCommand(Intent, int, int) : int
    + onDestroy() : void
    + onBind(Intent) : IBinder
}

@enduml